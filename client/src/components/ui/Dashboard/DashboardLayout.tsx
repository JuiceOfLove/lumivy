import React, { useContext, useEffect, useState } from "react";
import { Outlet, Link, useNavigate } from "react-router";
import { observer } from "mobx-react-lite";
import { Context } from "../../../main";
import SubscriptionService from "../../../services/SubscriptionService";
import CalendarService from "../../../services/CalendarService";
import styles from "./DashboardLayout.module.css";

const DashboardLayout: React.FC = () => {
  const { store } = useContext(Context);
  const navigate = useNavigate();

  const [isPremium, setIsPremium] = useState(false);
  const [calendars, setCalendars] = useState<any[]>([]);
  const [calOpen, setCalOpen] = useState(false);

  const [createModalOpen, setCreateModalOpen] = useState(false);
  const [newCalendarTitle, setNewCalendarTitle] = useState("");

  useEffect(() => {
    if (!store.authChecked) return;
    if (!store.isAuth) navigate("/auth/login");
    else if (store.user && store.user.family_id === 0)
      navigate("/dashboard/family/create");
    else {
      checkSubscriptionStatus();
      loadCalendars();
    }
  }, [store.isAuth, store.authChecked, store.user, navigate]);

  async function checkSubscriptionStatus() {
    try {
      const data = await SubscriptionService.checkSubscription();
      setIsPremium(data.isActive);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:", err);
    }
  }

  async function loadCalendars() {
    try {
      const cals = await CalendarService.getAllCalendars();
      setCalendars(cals);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π:", err);
    }
  }

  function toggleCalOpen() {
    setCalOpen(!calOpen);
  }

  async function handleLogout() {
    await store.logout();
    navigate("/auth/login");
  }

  const handleBuySubscription = async () => {
    try {
      const data = await SubscriptionService.buySubscription();
      if (data.payment_url) {
        window.location.href = data.payment_url;
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:", err);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.");
    }
  };

  const openCreateModal = () => {
    setNewCalendarTitle("");
    setCreateModalOpen(true);
  };
  const closeCreateModal = () => {
    setCreateModalOpen(false);
  };
  const submitCreateCalendar = async () => {
    if (!newCalendarTitle.trim()) return;
    try {
      await CalendarService.createExtraCalendar(newCalendarTitle.trim());
      await loadCalendars();
      closeCreateModal();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è:", err);
    }
  };

  return (
    <div className={styles.dashboardContainer}>
      <header className={styles.dashboardHeader}>
        <div className={styles.logo}>Lumivy</div>
      </header>

      <div className={styles.body}>
        <aside className={styles.sidebar}>
          {isPremium ? (
            <div className={styles.premiumBanner}>–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</div>
          ) : (
            <div className={styles.normalBanner}>
              –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
              <button
                className={styles.buyBtn}
                onClick={handleBuySubscription}
              >
                –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
              </button>
            </div>
          )}

          <nav>
            <ul className={styles.navList}>
              <li>
                <Link to="/dashboard" className={styles.navLink}>
                  –ì–ª–∞–≤–Ω–∞—è
                </Link>
              </li>
              <li>
                <div
                  onClick={toggleCalOpen}
                  className={styles.navLink}
                  style={{ cursor: "pointer" }}
                >
                  –ö–∞–ª–µ–Ω–¥–∞—Ä–∏ {calOpen ? "‚ñ≤" : "‚ñº"}
                </div>
                {calOpen && (
                  <ul className={styles.subNavList}>
                    {calendars.map((cal) => (
                      <li key={cal.id}>
                        <Link
                          to={`/dashboard/calendar/${cal.id}`}
                          className={styles.navLink}
                        >
                          {cal.title || "–ö–∞–ª–µ–Ω–¥–∞—Ä—å #" + cal.id}
                        </Link>
                      </li>
                    ))}
                    {isPremium && (
                      <li>
                        <button
                          onClick={openCreateModal}
                          className={styles.navLinkBtn}
                        >
                          + –°–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
                        </button>
                      </li>
                    )}
                  </ul>
                )}
              </li>
              <li>
                <Link to="/dashboard/chat" className={styles.navLink}>
                  –ß–∞—Ç
                </Link>
              </li>
              <li>
                <Link to="/dashboard/support" className={styles.navLink}>
                  –ü–æ–¥–¥–µ—Ä–∂–∫–∞
                </Link>
              </li>
              <li>
                <Link to="/dashboard/profile" className={styles.navLink}>
                  –ü—Ä–æ—Ñ–∏–ª—å
                </Link>
              </li>
              <li>
                <Link to="/dashboard/family" className={styles.navLink}>
                  –°–µ–º—å—è
                </Link>
              </li>
              {store.user?.role === "operator" && (
                <li>
                  <Link
                    to="/dashboard/support/operator/new"
                    className={styles.navLink}
                  >
                    –¢–∏–∫–µ—Ç—ã (–æ–ø–µ—Ä–∞—Ç–æ—Ä)
                  </Link>
                </li>
              )}
              {store.user?.role === "admin" && (
                <li>
                  <Link to="/dashboard/admin" className={styles.navLink}>
                    –ê–¥–º–∏–Ω–∫–∞
                  </Link>
                </li>
              )}
              <li>
                <span
                  onClick={handleLogout}
                  className={styles.navLink}
                  style={{ cursor: "pointer" }}
                >
                  –í—ã–π—Ç–∏
                </span>
              </li>
            </ul>
          </nav>
        </aside>

        <main className={styles.mainContent}>
          <Outlet />
        </main>
      </div>

      {/* Mobile bottom navigation */}
      <footer className={styles.mobileNav}>
        <Link to="/dashboard" className={styles.mobileNavLink}>
          üè†
        </Link>
        <Link to="/dashboard/calendar" className={styles.mobileNavLink}>
          üìÖ
        </Link>
        <Link to="/dashboard/chat" className={styles.mobileNavLink}>
          üí¨
        </Link>
        <Link to="/dashboard/support" className={styles.mobileNavLink}>
          üÜò
        </Link>
        <Link to="/dashboard/profile" className={styles.mobileNavLink}>
          üë§
        </Link>
      </footer>
      {createModalOpen && (
        <div className={styles.modalBackdrop}>
          <div className={styles.modal}>
            <h3 className={styles.modalTitle}>–ù–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å</h3>
            <input
              type="text"
              className={styles.modalInput}
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"
              value={newCalendarTitle}
              onChange={(e) => setNewCalendarTitle(e.target.value)}
              autoFocus
            />
            <div className={styles.modalButtons}>
              <button
                onClick={submitCreateCalendar}
                className={styles.saveBtn}
              >
                –°–æ–∑–¥–∞—Ç—å
              </button>
              <button onClick={closeCreateModal} className={styles.cancelBtn}>
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default observer(DashboardLayout);